name: edge

on:
  schedule:
    - cron: '0 0 * * *' # At 00:00
  push:
    branches:
      - main
    paths:
      # Workflow file itself
      - '.github/workflows/deploy_edge.yml'
      # Dockerfile
      - '*.dockerfile'
  workflow_dispatch:

permissions:
  packages: write
  contents: read

jobs:
  build_image:
    name: Build (${{ matrix.project }}-edge)
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false

      matrix:
        project:
          - "clang"
          - "clang-tidy"
          - "clang-format"
          - "llvm-bolt"

    steps:
      - name: Check out the repo
        uses: actions/checkout@v5

      - name: Docker Setup QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          # list of Docker images to use as base name for tags
          images: |
            ams21/${{ matrix.project }}
            ghcr.io/ams21/${{ matrix.project }}
          flavor: |
            latest=false
            prefix=
            suffix=
          # generate Docker tags based on the following events/attributes
          tags: |
            type=raw,value=edge

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Docker image
        uses: docker/build-push-action@v6
        with:
          context: ./
          file: ${{ matrix.project }}.dockerfile
          build-args: "VERSION=main"
          push: true
          platforms: "linux/amd64"
          annotations: ${{ steps.meta.outputs.annotations }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          outputs: type=docker,dest=/tmp/image.tar
